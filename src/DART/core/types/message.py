from typing import Dict

from .role import Role
from ..base.data_class import DataClass


class Message(DataClass):
    def __init__(
            self,
            role: str,
            name: str = None,
            persona: str = None,
            description: str = None,
            content: str = None,
            refusal: str = None,
            thinking: str = None,
    ):
        """The role of the author, should be in RoleSet.values()"""
        super().__init__()
        self.role = role.lower()
        if self.role not in Role.values():
            raise ValueError(f'role must be one of {Role.values()}, bug got {self.role}')

        """The name of the agent, or the name of the tool."""
        self.name = name

        """The persona of the agent."""
        self.persona = persona

        """The description of the agent, or the doc of the tool."""
        self.description = description

        """The content of this message"""
        self.content = content

        """The refusal message generated by the model."""
        self.refusal = refusal

        """The thinking message generated by the model."""
        self.thinking = thinking

    def is_empty(self):
        return (not self.content) and (not self.refusal) and (not self.thinking)

    def to_dict(self, include_none=False) -> Dict:
        return super().to_dict(include_none=include_none)

    def to_string(self, include_none=False) -> Dict:
        return super().to_string(include_none=include_none)

    def to_json(self, include_none=False) -> Dict:
        return super().to_json(include_none=include_none)

    def to_message(self):
        return dict(
            role=self.role,
            content=self.content
        )


class SystemMessage(Message):
    def __init__(self, content: str):
        super().__init__(role=Role.SYSTEM.value, content=content)


class UserMessage(Message):
    def __init__(self, content: str, name: str = None, persona: str = None, description: str = None):
        super().__init__(role=Role.USER.value, name=name, persona=persona, description=description, content=content)


class AssistantMessage(Message):
    def __init__(self, content: str, name: str = None, persona: str = None, description: str = None):
        super().__init__(role=Role.ASSISTANT.value, name=name, persona=persona, description=description,
                         content=content)


class ToolMessage(Message):
    def __init__(self, content: str, name: str = None, description: str = None):
        super().__init__(role=Role.TOOL.value, name=name, description=description, content=content)

    def to_message(self):
        return dict(
            role=self.role,
            content=f"""
**name**: {self.name}

**description**: {self.description}

**response**: {self.content}
""".strip()
        )
